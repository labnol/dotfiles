#!/usr/bin/env sh

set -efo pipefail

# fail if no remote is specified
usage() {
    bold=$(tput bold)
    italic=$(tput sitm)
    reset=$(tput sgr0)

    printf "\n${bold}USAGE${reset}\n"
    printf "\tgit fork <origin_uri> <fork_uri>\n\n"

    printf "\n${bold}ASSUMPTIONS${reset}"
    printf "\n\t* you want or have two remotes: origin and fork"
    printf "\n\t* you are either in a repository directory with a properly "
    printf "configured\n\t  origin or not in a repository directory at all"
    printf "\n\t* <origin_uri> is the source of truth"
    printf "\n\t* <fork_uri> is your fork/copy (where ${italic}you${reset} "
    printf "do development)\n"
}


log() {
    timestamp=$(date +'%Y-%m-%d %TZ%z')

    case "$1" in
        info)
            shift
            echo "${timestamp} INFO $*"
            ;;
        error)
            shift
            echo "${timestamp} ERROR $*"
            ;;
        fatal)
            shift
            echo "${timestamp} FATAL $*"
            exit 1
            ;;
    esac
}

# arg_set is a small wrapper around a boolean check for whether or not a
# variable has a non-empty value
arg_set() {
  [ -n "$1" ]
}

# args_equal is a small wrapper around a boolean string comparison
args_equal() {
  [ "$1" == "$2" ]
}

# config_set sets a property in the local git configuration file
config_set() {
  git config --local "$@"
}

# config_add adds an additional value to a property if it exists
config_add() {
  git config --local --add "$@"
}

# config_unset unsets a property in the local git configuration file
config_unset() {
  git config --local --unset-all "$@" || true
}

# config_get gets the value of a property from the local git configuration file
config_get() {
  git config --local --get "$@"
}

# get_default_remote_ref_name fetches the 
get_default_remote_ref_name() {
  if ! arg_set "$1"
  then
    log fatal "get_default_remote_ref_name expects one argument: <remote_name>"
  fi

  git ls-remote "$1" HEAD |\
  cut -d ' ' -f 1 |\
  xargs git rev-parse --abbrev-ref 2>/dev/null
}

# What are the URIs for the remotes?
GIT_FORK__ORIGIN_URI="$1"
GIT_FORK__FORK_URI="$2"
GIT_FORK__REPODIR="$3"

# Ensure both arguments have been passed
if ! arg_set $GIT_FORK__ORIGIN_URI || ! arg_set $GIT_FORK__FORK_URI
then
  usage ; exit 1
fi

# What is the repository name and location on disk?
GIT_FORK__REPOSITORY_NAME_SHORT="${GIT_FORK__ORIGIN_URI%\.git}"
GIT_FORK__REPOSITORY_NAME_SHORT="${GIT_FORK__REPOSITORY_NAME_SHORT##*\/}"

# What is the default branch name?
GIT_FORK__HEAD_REF_NAME=""

# What refs should we fetch from origin?
GIT_FORK__ORIGIN_REFSPEC=""

# if we're in a git repository already...
if git rev-parse --git-dir &> /dev/null; then
  # get the remote urls via config to ensure we're matching against what the
  # user is typing. this takes care of matching through any url.*.insteadOf
  # mappings (which git uses to override the url display through commands like
  # `git remove -v` and similar)
  GIT_FORK__CONFIG_ORIGIN_URI="$(config_get remote.origin.url || true)"
  GIT_FORK__CONFIG_FORK_URI="$(config_get remote.fork.url 2>/dev/null)"
  
  # if the origin remote doesn't match what we expect: error out
  if \
    arg_set "$GIT_FORK__CONFIG_ORIGIN_URI" &&\
    ! args_equal "$GIT_FORK__CONFIG_ORIGIN_URI" "$GIT_FORK__ORIGIN_URI"
  then
    FAIL=1
    log error \
      "remote.origin.url: expected '${GIT_FORK__ORIGIN_URI}', got '${GIT_FORK__CONFIG_ORIGIN_URI}'"
  fi

  # if the fork remote doesn't match what we expect: error out
  if ! args_equal "$GIT_FORK__CONFIG_FORK_URI" "$GIT_FORK__FORK_URI"
  then
    FAIL=1
    log error \
      "remote.fork.url: expected '${GIT_FORK__FORK_URI}', got '${GIT_FORK__CONFIG_FORK_URI}'"
  fi

  arg_set "$FAIL" && log fatal "unexpected remote values: ${@:1:2}"

  GIT_FORK__HEAD_REF_NAME=$(get_default_remote_ref_name "$GIT_FORK__ORIGIN_URI")
else
  # if GIT_FORK__REPODIR was unspecified, we should default to the repository
  # short name. This replicates the default behavior from git, and is necessary
  # in order to change into the directory.
  if ! arg_set "$GIT_FORK__REPODIR"; then
      GIT_FORK__REPODIR="$GIT_FORK__REPOSITORY_NAME_SHORT"
  fi

  # clone the repository
  git clone $GIT_FORK__ORIGIN_URI $GIT_FORK__REPODIR

  # move into the directory if we aren't already in it
  args_equal $(realpath "${GIT_FORK__REPODIR}") "$PWD" ||\
    pushd "$GIT_FORK__REPODIR" &> /dev/null

  GIT_FORK__HEAD_REF_NAME=$(git rev-parse --abbrev-ref HEAD)
fi

arg_set "$GIT_FORK__HEAD_REF_NAME" ||\
  log fatal "origin/HEAD not detected"

# get some information from the remote
origin_refspec_remote="refs/heads/${GIT_FORK__HEAD_REF_NAME}"
origin_refspec_local="refs/remotes/origin/${GIT_FORK__HEAD_REF_NAME}"
GIT_FORK__ORIGIN_REFSPEC="+${origin_refspec_remote}:${origin_refspec_local}"

# don't prune tags by default, because we set an explicit refspec for them on
# the origin remote only, in order to reduce noise from tag clobbering
config_set fetch.prunetags false

# always push to fork
config_set remote.pushdefault fork

# configure the upstream remote
config_set remote.origin.url "$GIT_FORK__ORIGIN_URI"
config_set remote.origin.fetch "$GIT_FORK__ORIGIN_REFSPEC"
config_add remote.origin.fetch "+refs/tags/*:refs/tags/*"

# configure the fork remote
config_unset remote.fork.fetch
config_set remote.fork.url "$GIT_FORK__FORK_URI"
config_set remote.fork.fetch '+refs/heads/*:refs/remotes/fork/*'

# configure branches
config_set "branch.${GIT_FORK__HEAD_REF_NAME}.remote" origin
config_set "branch.${GIT_FORK__HEAD_REF_NAME}.rebase" true

# fetch the upstream repository so that tracking will work immediately
git fetch --all
